package com.putao.wd.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.putao.wd.db.entity.CompanionDB;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "putao_wd_companion".
 */
public class CompanionDBDao extends AbstractDao<CompanionDB, String> {

    public static final String TABLENAME = "putao_wd_companion";

    /**
     * Properties of entity CompanionDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property id = new Property(0, String.class, "id", true, "ID");
        public final static Property service_id = new Property(1, String.class, "service_id", false, "SERVICE_ID");
        public final static Property type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property release_time = new Property(3, Integer.class, "release_time", false, "RELEASE_TIME");
        public final static Property content_lists = new Property(4, String.class, "content_lists", false, "CONTENT_LISTS");
        public final static Property is_download = new Property(5, String.class, "is_download", false, "IS_DOWNLOAD");
    }


    public CompanionDBDao(DaoConfig config) {
        super(config);
    }

    public CompanionDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        String str = "CREATE TABLE " + constraint + "\"" + TABLENAME + "\"" + " (" +
                "\"" + Properties.id.columnName + "\"" + " TEXT PRIMARY KEY NOT NULL," +
                "\"" + Properties.service_id.columnName + "\"" + " TEXT NOT NULL," +
                "\"" + Properties.type.columnName + "\"" + " TEXT," +
                "\"" + Properties.release_time.columnName + "\"" + " TEXT," +
                "\"" + Properties.content_lists.columnName + "\"" + " TEXT," +
                "\"" + Properties.is_download.columnName + "\"" + " TEXT)";
        db.execSQL(str);
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + TABLENAME;
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset) ? null : cursor.getString(offset);
    }

    /**
     * @inheritdoc
     */
    @Override
    public CompanionDB readEntity(Cursor cursor, int offset) {
        CompanionDB entity = new CompanionDB(
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // service_id
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // release_time
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content_lists
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // is_download
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, CompanionDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setService_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRelease_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent_lists(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsDownload(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
    }

    @Override
    protected void bindValues(SQLiteStatement stmt, CompanionDB entity) {
        stmt.clearBindings();

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }

        String service_id = entity.getService_id();
        if (service_id != null) {
            stmt.bindString(2, service_id);
        }

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }

        String release_time = entity.getRelease_time();
        if (release_time != null) {
            stmt.bindString(4, release_time);
        }
        String content_lists = entity.getContent_lists();
        if (release_time != null) {
            stmt.bindString(5, content_lists);
        }
        String is_download = entity.getIsDownload();
        if (release_time != null) {
            stmt.bindString(6, is_download);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(CompanionDB entity, long rowId) {
        return entity.getId();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(CompanionDB entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
