package com.putao.wd.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.putao.wd.db.entity.CityDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "putao_wd_city".
*/
public class CityDBDao extends AbstractDao<CityDB, String> {

    public static final String TABLENAME = "putao_wd_city";

    /**
     * Properties of entity CityDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Province_id = new Property(0, String.class, "province_id", false, "PROVINCE_ID");
        public final static Property City_id = new Property(1, String.class, "city_id", true, "CITY_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
    };


    public CityDBDao(DaoConfig config) {
        super(config);
    }
    
    public CityDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"putao_wd_city\" (" + //
                "\"PROVINCE_ID\" TEXT," + // 0: province_id
                "\"CITY_ID\" TEXT PRIMARY KEY NOT NULL ," + // 1: city_id
                "\"NAME\" TEXT);"); // 2: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"putao_wd_city\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CityDB entity) {
        stmt.clearBindings();
 
        String province_id = entity.getProvince_id();
        if (province_id != null) {
            stmt.bindString(1, province_id);
        }
 
        String city_id = entity.getCity_id();
        if (city_id != null) {
            stmt.bindString(2, city_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public CityDB readEntity(Cursor cursor, int offset) {
        CityDB entity = new CityDB( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // province_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // city_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CityDB entity, int offset) {
        entity.setProvince_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCity_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(CityDB entity, long rowId) {
        return entity.getCity_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(CityDB entity) {
        if(entity != null) {
            return entity.getCity_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
