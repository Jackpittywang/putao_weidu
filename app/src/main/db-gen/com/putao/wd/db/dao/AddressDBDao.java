package com.putao.wd.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.putao.wd.db.entity.AddressDB;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "putao_wd_address".
*/
public class AddressDBDao extends AbstractDao<AddressDB, Long> {

    public static final String TABLENAME = "putao_wd_address";

    /**
     * Properties of entity AddressDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Province = new Property(2, String.class, "province", false, "PROVINCE");
        public final static Property Province_id = new Property(3, String.class, "province_id", false, "PROVINCE_ID");
        public final static Property City = new Property(4, String.class, "city", false, "CITY");
        public final static Property City_id = new Property(5, String.class, "city_id", false, "CITY_ID");
        public final static Property District = new Property(6, String.class, "district", false, "DISTRICT");
        public final static Property District_id = new Property(7, String.class, "district_id", false, "DISTRICT_ID");
        public final static Property Street = new Property(8, String.class, "street", false, "STREET");
        public final static Property Mobile = new Property(9, String.class, "mobile", false, "MOBILE");
        public final static Property IsDefault = new Property(10, Boolean.class, "isDefault", false, "IS_DEFAULT");
    };


    public AddressDBDao(DaoConfig config) {
        super(config);
    }
    
    public AddressDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"putao_wd_address\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PROVINCE\" TEXT," + // 2: province
                "\"PROVINCE_ID\" TEXT," + // 3: province_id
                "\"CITY\" TEXT," + // 4: city
                "\"CITY_ID\" TEXT," + // 5: city_id
                "\"DISTRICT\" TEXT," + // 6: district
                "\"DISTRICT_ID\" TEXT," + // 7: district_id
                "\"STREET\" TEXT," + // 8: street
                "\"MOBILE\" TEXT," + // 9: mobile
                "\"IS_DEFAULT\" INTEGER);"); // 10: isDefault
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_putao_wd_address__id ON putao_wd_address" +
                " (\"_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"putao_wd_address\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AddressDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(3, province);
        }
 
        String province_id = entity.getProvince_id();
        if (province_id != null) {
            stmt.bindString(4, province_id);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(5, city);
        }
 
        String city_id = entity.getCity_id();
        if (city_id != null) {
            stmt.bindString(6, city_id);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(7, district);
        }
 
        String district_id = entity.getDistrict_id();
        if (district_id != null) {
            stmt.bindString(8, district_id);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(9, street);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(10, mobile);
        }
 
        Boolean isDefault = entity.getIsDefault();
        if (isDefault != null) {
            stmt.bindLong(11, isDefault ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AddressDB readEntity(Cursor cursor, int offset) {
        AddressDB entity = new AddressDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // province
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // province_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // city
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // city_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // district
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // district_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // street
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // mobile
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0 // isDefault
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AddressDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProvince(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProvince_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCity_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDistrict(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDistrict_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStreet(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMobile(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsDefault(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AddressDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AddressDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
